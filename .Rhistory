name = "H3") %>%
layer_dense(units = 2,
activation = "sigmoid",
name = "Out")
summary(model)
model %>%
compile(loss = "binary_crossentropy",
optimizer = optimizer_adam(learning_rate =0.001),
metrics = "accuracy")
history <- model %>%
fit(x = train_x_keras,
y = train_y_keras,
batch_size = 5,
epochs = 15,
verbose = T,
test_data = list(test_x_keras, test_y_keras))
plot(history)
# Please type your answer
predict_class <- predict(model, test_x_keras) %>%
k_argmax() %>%
as.array() %>%
as.factor()
predict_class %>%
head()
# Please type your answer
caret::confusionMatrix(predict_class, as.factor(attrition_test$AttritionYes), positive = "0")
# keras initialization
model <- keras_model_sequential()
# Untuk mengunci random
tensorflow::tf$random$set_seed(123)
# Please type your answer
model %>%
layer_dense(input_shape = 44,
units = 16,
activation = "relu",
name = "H1") %>%
layer_dense(units = 8,
activation = "relu",
name = "H2") %>%
layer_dense(units = 4,
activation = "relu",
name = "H3") %>%
layer_dense(units = 2,
activation = "sigmoid",
name = "Out")
summary(model)
model %>%
compile(loss = "binary_crossentropy",
optimizer = optimizer_adam(learning_rate =0.001),
metrics = "accuracy")
history <- model %>%
fit(x = train_x_keras,
y = train_y_keras,
batch_size = 5,
epochs = 15,
verbose = T,
test_data = list(test_x_keras, test_y_keras))
plot(history)
# Please type your answer
predict_class <- predict(model, test_x_keras) %>%
k_argmax() %>%
as.array() %>%
as.factor()
predict_class %>%
head()
# Please type your answer
caret::confusionMatrix(predict_class, as.factor(attrition_test$AttritionYes), positive = "0")
# keras initialization
model <- keras_model_sequential()
# Untuk mengunci random
tensorflow::tf$random$set_seed(123)
# Please type your answer
model %>%
layer_dense(input_shape = 44,
units = 16,
activation = "relu",
name = "H1") %>%
layer_dense(units = 8,
activation = "relu",
name = "H2") %>%
layer_dense(units = 6,
activation = "relu",
name = "H3") %>%
layer_dense(units = 2,
activation = "sigmoid",
name = "Out")
summary(model)
model %>%
compile(loss = "binary_crossentropy",
optimizer = optimizer_adam(learning_rate =0.001),
metrics = "accuracy")
history <- model %>%
fit(x = train_x_keras,
y = train_y_keras,
batch_size = 5,
epochs = 15,
verbose = T,
test_data = list(test_x_keras, test_y_keras))
plot(history)
# Please type your answer
predict_class <- predict(model, test_x_keras) %>%
k_argmax() %>%
as.array() %>%
as.factor()
predict_class %>%
head()
# Please type your answer
caret::confusionMatrix(predict_class, as.factor(attrition_test$AttritionYes), positive = "0")
# Untuk mengunci random
tensorflow::tf$random$set_seed(123)
# Please type your answer
model %>%
layer_dense(input_shape = 44,
units = 32,
activation = "relu",
name = "H1") %>%
layer_dense(units = 8,
activation = "relu",
name = "H2") %>%
layer_dense(units = 4,
activation = "relu",
name = "H3") %>%
layer_dense(units = 2,
activation = "sigmoid",
name = "Out")
# keras initialization
model <- keras_model_sequential()
# Untuk mengunci random
tensorflow::tf$random$set_seed(123)
# Please type your answer
model %>%
layer_dense(input_shape = 44,
units = 32,
activation = "relu",
name = "H1") %>%
layer_dense(units = 8,
activation = "relu",
name = "H2") %>%
layer_dense(units = 4,
activation = "relu",
name = "H3") %>%
layer_dense(units = 2,
activation = "sigmoid",
name = "Out")
summary(model)
model %>%
compile(loss = "binary_crossentropy",
optimizer = optimizer_adam(learning_rate =0.001),
metrics = "accuracy")
history <- model %>%
fit(x = train_x_keras,
y = train_y_keras,
batch_size = 5,
epochs = 15,
verbose = T,
test_data = list(test_x_keras, test_y_keras))
plot(history)
# Please type your answer
predict_class <- predict(model, test_x_keras) %>%
k_argmax() %>%
as.array() %>%
as.factor()
predict_class %>%
head()
# Untuk mengunci random
tensorflow::tf$random$set_seed(123)
# Please type your answer
model %>%
layer_dense(input_shape = 44,
units = 32,
activation = "relu",
name = "H1") %>%
layer_dense(units = 16,
activation = "relu",
name = "H2") %>%
layer_dense(units = 4,
activation = "relu",
name = "H3") %>%
layer_dense(units = 2,
activation = "sigmoid",
name = "Out")
# keras initialization
model <- keras_model_sequential()
# Untuk mengunci random
tensorflow::tf$random$set_seed(123)
# Please type your answer
model %>%
layer_dense(input_shape = 44,
units = 32,
activation = "relu",
name = "H1") %>%
layer_dense(units = 16,
activation = "relu",
name = "H2") %>%
layer_dense(units = 4,
activation = "relu",
name = "H3") %>%
layer_dense(units = 2,
activation = "sigmoid",
name = "Out")
summary(model)
model %>%
compile(loss = "binary_crossentropy",
optimizer = optimizer_adam(learning_rate =0.001),
metrics = "accuracy")
history <- model %>%
fit(x = train_x_keras,
y = train_y_keras,
batch_size = 5,
epochs = 15,
verbose = T,
test_data = list(test_x_keras, test_y_keras))
plot(history)
# Please type your answer
predict_class <- predict(model, test_x_keras) %>%
k_argmax() %>%
as.array() %>%
as.factor()
predict_class %>%
head()
# Please type your answer
caret::confusionMatrix(predict_class, as.factor(attrition_test$AttritionYes), positive = "0")
# Untuk mengunci random
tensorflow::tf$random$set_seed(123)
# Please type your answer
model %>%
layer_dense(input_shape = 44,
units = 16,
activation = "relu",
name = "H1") %>%
layer_dense(units = 8,
activation = "relu",
name = "H2") %>%
layer_dense(units = 4,
activation = "relu",
name = "H3") %>%
layer_dense(units = 2,
activation = "sigmoid",
name = "Out")
# keras initialization
model <- keras_model_sequential()
# Untuk mengunci random
tensorflow::tf$random$set_seed(123)
# Please type your answer
model %>%
layer_dense(input_shape = 44,
units = 16,
activation = "relu",
name = "H1") %>%
layer_dense(units = 8,
activation = "relu",
name = "H2") %>%
layer_dense(units = 4,
activation = "relu",
name = "H3") %>%
layer_dense(units = 2,
activation = "sigmoid",
name = "Out")
summary(model)
model %>%
compile(loss = "binary_crossentropy",
optimizer = optimizer_adam(learning_rate =0.001),
metrics = "accuracy")
history <- model %>%
fit(x = train_x_keras,
y = train_y_keras,
batch_size = 5,
epochs = 15,
verbose = T,
test_data = list(test_x_keras, test_y_keras))
plot(history)
# Please type your answer
predict_class <- predict(model, test_x_keras) %>%
k_argmax() %>%
as.array() %>%
as.factor()
predict_class %>%
head()
# keras initialization
model <- keras_model_sequential()
# Untuk mengunci random
tensorflow::tf$random$set_seed(123)
# Please type your answer
model %>%
layer_dense(input_shape = 44,
units = 16,
activation = "relu",
name = "H1") %>%
layer_dense(units = 12,
activation = "relu",
name = "H2") %>%
layer_dense(units = 4,
activation = "relu",
name = "H3") %>%
layer_dense(units = 2,
activation = "sigmoid",
name = "Out")
summary(model)
model %>%
compile(loss = "binary_crossentropy",
optimizer = optimizer_adam(learning_rate =0.001),
metrics = "accuracy")
history <- model %>%
fit(x = train_x_keras,
y = train_y_keras,
batch_size = 5,
epochs = 15,
verbose = T,
test_data = list(test_x_keras, test_y_keras))
# keras initialization
model <- keras_model_sequential()
# Untuk mengunci random
tensorflow::tf$random$set_seed(123)
# Please type your answer
model %>%
layer_dense(input_shape = 44,
units = 32,
activation = "relu",
name = "H1") %>%
layer_dense(units = 16,
activation = "relu",
name = "H2") %>%
layer_dense(units = 8,
activation = "relu",
name = "H3") %>%
layer_dense(units = 2,
activation = "sigmoid",
name = "Out")
summary(model)
model %>%
compile(loss = "binary_crossentropy",
optimizer = optimizer_adam(learning_rate =0.001),
metrics = "accuracy")
history <- model %>%
fit(x = train_x_keras,
y = train_y_keras,
batch_size = 5,
epochs = 15,
verbose = T,
test_data = list(test_x_keras, test_y_keras))
plot(history)
# Please type your answer
predict_class <- predict(model, test_x_keras) %>%
k_argmax() %>%
as.array() %>%
as.factor()
predict_class %>%
head()
# Please type your answer
caret::confusionMatrix(predict_class, as.factor(attrition_test$AttritionYes), positive = "0")
# keras initialization
model <- keras_model_sequential()
# Untuk mengunci random
tensorflow::tf$random$set_seed(123)
# Please type your answer
model %>%
layer_dense(input_shape = 44,
units = 16,
activation = "relu",
name = "H1") %>%
layer_dense(units = 8,
activation = "relu",
name = "H2") %>%
layer_dense(units = 4,
activation = "relu",
name = "H3") %>%
layer_dense(units = 2,
activation = "sigmoid",
name = "Out")
summary(model)
model %>%
compile(loss = "binary_crossentropy",
optimizer = optimizer_adam(learning_rate =0.001),
metrics = "accuracy")
history <- model %>%
fit(x = train_x_keras,
y = train_y_keras,
batch_size = 5,
epochs = 15,
verbose = T,
test_data = list(test_x_keras, test_y_keras))
plot(history)
# Please type your answer
predict_class <- predict(model, test_x_keras) %>%
k_argmax() %>%
as.array() %>%
as.factor()
predict_class %>%
head()
# Please type your answer
caret::confusionMatrix(predict_class, as.factor(attrition_test$AttritionYes), positive = "0")
# keras initialization
model <- keras_model_sequential()
# Untuk mengunci random
tensorflow::tf$random$set_seed(123)
# Please type your answer
model %>%
layer_dense(input_shape = 44,
units = 32,
activation = "relu",
name = "H1") %>%
layer_dense(units = 24,
activation = "relu",
name = "H2") %>%
layer_dense(units = 4,
activation = "relu",
name = "H3") %>%
layer_dense(units = 2,
activation = "sigmoid",
name = "Out")
summary(model)
model %>%
compile(loss = "binary_crossentropy",
optimizer = optimizer_adam(learning_rate =0.001),
metrics = "accuracy")
history <- model %>%
fit(x = train_x_keras,
y = train_y_keras,
batch_size = 5,
epochs = 15,
verbose = T,
test_data = list(test_x_keras, test_y_keras))
plot(history)
# Please type your answer
predict_class <- predict(model, test_x_keras) %>%
k_argmax() %>%
as.array() %>%
as.factor()
predict_class %>%
head()
# keras initialization
model <- keras_model_sequential()
# Untuk mengunci random
tensorflow::tf$random$set_seed(123)
# Please type your answer
model %>%
layer_dense(input_shape = 44,
units = 16,
activation = "relu",
name = "H1") %>%
layer_dense(units = 8,
activation = "relu",
name = "H2") %>%
layer_dense(units = 6,
activation = "relu",
name = "H3") %>%
layer_dense(units = 2,
activation = "sigmoid",
name = "Out")
summary(model)
model %>%
compile(loss = "binary_crossentropy",
optimizer = optimizer_adam(learning_rate =0.001),
metrics = "accuracy")
history <- model %>%
fit(x = train_x_keras,
y = train_y_keras,
batch_size = 5,
epochs = 15,
verbose = T,
test_data = list(test_x_keras, test_y_keras))
plot(history)
# Please type your answer
predict_class <- predict(model, test_x_keras) %>%
k_argmax() %>%
as.array() %>%
as.factor()
predict_class %>%
head()
# Please type your answer
caret::confusionMatrix(predict_class, as.factor(attrition_test$AttritionYes), positive = "0")
# keras initialization
model <- keras_model_sequential()
# Untuk mengunci random
tensorflow::tf$random$set_seed(123)
# Please type your answer
model %>%
layer_dense(input_shape = 44,
units = 32,
activation = "relu",
name = "H1") %>%
layer_dense(units = 16,
activation = "relu",
name = "H2") %>%
layer_dense(units = 8,
activation = "relu",
name = "H3") %>%
layer_dense(units = 2,
activation = "sigmoid",
name = "Out")
summary(model)
model %>%
compile(loss = "binary_crossentropy",
optimizer = optimizer_adam(learning_rate =0.001),
metrics = "accuracy")
history <- model %>%
fit(x = train_x_keras,
y = train_y_keras,
batch_size = 5,
epochs = 15,
verbose = T,
test_data = list(test_x_keras, test_y_keras))
plot(history)
# Please type your answer
predict_class <- predict(model, test_x_keras) %>%
k_argmax() %>%
as.array() %>%
as.factor()
predict_class %>%
head()
# Please type your answer
caret::confusionMatrix(predict_class, as.factor(attrition_test$AttritionYes), positive = "0")
